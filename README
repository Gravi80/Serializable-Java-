"Java serialization is the process which is used to serialize object
 in java by storing object’s state into a file with extension .ser
 and recreating object's state from that file,
 this reverse process is called deserialization.


Object Serialization in Java is a process used to convert Object into a binary format
which can be persisted into disk or sent over network to any other running Java virtual machine;
the reverse process of creating object from binary stream is called deserialization in Java.

Primary purpose of java serialization is to write an object into a stream,
so that it can be transported through a network and that object can be rebuilt again.
When there are two different parties involved, you need a protocol to rebuild the exact same object again.
Java serialization API just provides you that.


In Java, a class is serializable if and when it implements the Serializable interface,
which is an interface residing in the java.io package.

If a class is serializable, it means that any object of that class can be converted into a sequence of bits
so that it can be written to some storage medium (like a file), or even transmitted across a network.


Serializable interface exists in java.io  package and forms core of java serialization mechanism.
It doesn't have any method and also called Marker Interface in Java.
When your class implements java.io.Serializable interface it becomes Serializable in Java
and gives compiler an indication that use Java Serialization mechanism to serialize this object.





Q).What is serialVersionUID? What would happen if you don't define this?
  Ans. SerialVersionUID is an ID which is stamped on object when it get serialized usually hashcode of object,
       you can use tool serialver to see serialVersionUID of a serialized object .
       SerialVersionUID is used for version control of object.
       you can specify serialVersionUID in your class file also.
       Consequence of not specifying  serialVersionUID is that
       when you add or modify any field in class then
       already serialized class will not be able to recover because
       serialVersionUID generated for new class and for old serialized object will be different.
       Java serialization process relies on correct serialVersionUID
       for recovering state of serialized object and throws java.io.InvalidClassException
       in case of serialVersionUID mismatch.

Q) While serializing you want some of the members not to serialize? How do you achieve it?
   If you don't want any field to be part of object's state then declare it either static or transient
   based on your need and it will not be included during Java serialization process.


Q) What will happen if one of the members in the class doesn't implement Serializable interface?
   If you try to serialize an object of a class which implements Serializable,
   but the object includes a reference to an non- Serializable class then
   a ‘NotSerializableException’ will be thrown at runtime.


Q) Can you Customize Serialization process or can you override default Serialization process in Java?
   We all know that for serializing an object ObjectOutputStream.writeObject (saveThisobject) is invoked
   and for reading object ObjectInputStream.readObject() is invoked
   but there is one more thing which Java Virtual Machine provides you is to define these two method in your class.
   If you define these two methods in your class then JVM will invoke these two methods
   instead of applying default serialization mechanism.
   You can customize behavior of object serialization and deserialization
   here by doing any kind of pre or post processing task.
   Important point to note is making these methods private to avoid being inherited, overridden or overloaded.
   Since only Java Virtual Machine can call private method integrity of your class will remain
   and Java Serialization will work as normal.

Q) Suppose super class of a new class implement Serializable interface, how can you avoid new class to being serialized?
   To avoid java serialization you need to implement writeObject() and readObject() method in your Class and
   need to throw NotSerializableException from those method.
   This is another benefit of customizing java serialization process.

Q) Which methods are used during Serialization and DeSerialization process in java?
   Whether you are familiar with usage of readObject(), writeObject(), readExternal() and writeExternal () or not.
   Java Serialization is done by java.io.ObjectOutputStream class.
   That class is a filter stream which is wrapped around a lower-level byte stream to handle the serialization mechanism.
  To store any object via serialization mechanism we call ObjectOutputStream.writeObject(saveThisobject)
   and to deserialize that object we call ObjectInputStream.readObject() method.
   Call to writeObject() method trigger serialization process in java.
   one important thing to note about readObject() method is that it is used to read bytes from the persistence
   and to create object from those bytes and its return an Object which needs to be casted on correct type.


Q) Can we transfer a Serialized object vie network?
   Yes you can transfer a Serialized object via network because java serialized object remains in form of bytes
   which can be transmitter via network.
   You can also store serialized object in Disk or database as Blob.

13) Which kind of variables is not serialized during Java Serialization?
    static and transient variable or not.
    Since static variables belong to the class and not to an object they are not the part of the state of object
    so they are not saved during Java Serialization process.
    As Java Serialization only persist state of object and not object itself.
    Transient variables are also not included in java serialization process and
    are not the part of the object’s serialized state.



    public class SomeClass implements java.io.Serializable
    {
    	// this class is serializable
    	...
    	// this variable will not persist
        private transient String password;
    }

